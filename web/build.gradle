import java.nio.file.Files

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.4'
    }
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

dependencies {
    providedCompile group: 'javax.servlet', name: 'servlet-api', version:'2.5'
    compile 'com.google.appengine:appengine-api-1.0-sdk:1.9.60'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

appengine {
    run {
        port = 8888
    }

    deploy {
        // make this deploy the current version
        promote = true
        project 'five-minutes-cssignal'
        version '1'
    }
}

ext.javascriptSourceDir = file('src/main/javascript')
ext.javascriptOutputDir = file("${buildDir}/js")
ext.javascriptDepsFile = file("${buildDir}/deps.js")
ext.libraryDir = file('lib')
ext.closureLibraryDir = file("${libraryDir}/closure-library")
ext.closureCompilerJar = file("${libraryDir}/closure-compiler/compiler.jar")
ext.closureBuilderBin = file("${closureLibraryDir}/closure/bin/build/closurebuilder.py")
ext.closureDepsWriterBin = file("${closureLibraryDir}/closure/bin/build/depswriter.py")

class ClosureBuilderCompileTask extends DefaultTask {
    String compilationLevel
    String namespace
    String warningLevel
    File destFile

    @TaskAction
    void run() {
        destFile.getParentFile().mkdirs();
        project.exec {
            commandLine project.closureBuilderBin,
                    "--root=${project.closureLibraryDir}",
                    "--root=${project.javascriptSourceDir}",
                    "--namespace=${namespace}",
                    "--output_mode=compiled",
                    "--compiler_jar=${project.closureCompilerJar}",
                    "--compiler_flags=--compilation_level=${compilationLevel}",
                    "--compiler_flags=--warning_level=${warningLevel}",
                    "--compiler_flags=--jscomp_error=accessControls",
                    "--compiler_flags=--jscomp_error=ambiguousFunctionDecl",
                    "--compiler_flags=--jscomp_error=checkDebuggerStatement",
                    "--compiler_flags=--jscomp_error=checkRegExp",
                    "--compiler_flags=--jscomp_error=checkTypes",
                    "--compiler_flags=--jscomp_error=checkVars",
                    "--compiler_flags=--jscomp_error=const",
                    "--compiler_flags=--jscomp_error=constantProperty",
                    "--compiler_flags=--jscomp_error=deprecated",
                    "--compiler_flags=--jscomp_error=duplicate",
                    // es5strict
                    "--compiler_flags=--jscomp_error=externsValidation",
                    "--compiler_flags=--jscomp_error=fileoverviewTags",
                    "--compiler_flags=--jscomp_error=globalThis",
                    "--compiler_flags=--jscomp_error=internetExplorerChecks",
                    "--compiler_flags=--jscomp_error=invalidCasts",
                    "--compiler_flags=--jscomp_error=missingProperties",
                    "--compiler_flags=--jscomp_error=nonStandardJsDocs",
                    "--compiler_flags=--jscomp_error=strictModuleDepCheck",
                    "--compiler_flags=--jscomp_error=undefinedNames",
                    "--compiler_flags=--jscomp_error=undefinedVars",
                    "--compiler_flags=--jscomp_error=unknownDefines",
                    "--compiler_flags=--jscomp_error=uselessCode",
                    "--compiler_flags=--jscomp_error=visibility"
            standardOutput destFile.newOutputStream()
        }
    }
}

class ClosureGenerateDepsTask extends DefaultTask {
    String rootRelativeToClosure
    File destFile

    @TaskAction
    void run() {
        destFile.getParentFile().mkdirs();
        project.exec {
            commandLine project.closureDepsWriterBin,
                    "--root_with_prefix=${project.javascriptSourceDir} ${rootRelativeToClosure}"
            standardOutput destFile.newOutputStream()
        }
    }
}

task compileJavascriptDebug(type: ClosureBuilderCompileTask) {
    compilationLevel "WHITESPACE_ONLY"
    namespace "five.main"
    warningLevel "VERBOSE"
    destFile file("${javascriptOutputDir}/maindebug.js")
}

task compileJavascriptOptimized(type: ClosureBuilderCompileTask) {
    compilationLevel "ADVANCED_OPTIMIZATIONS"
    namespace "five.main"
    warningLevel "VERBOSE"
    destFile file("${javascriptOutputDir}/mainoptimized.js")
}

task generateJavascriptDeps(type: ClosureGenerateDepsTask) {
    rootRelativeToClosure "../../../../src/javascript"
    destFile javascriptDepsFile
}

compileJavascriptDebug.dependsOn(generateJavascriptDeps)

war {
    dependsOn compileJavascriptDebug
    dependsOn compileJavascriptOptimized
    exclude "js"
    from("${buildDir}/js", {
        into 'js'
    })
}

static void createSymlink(File destination, File source) {
    if (!destination.exists()) {
        throw new IOException("Symlink failed: Expected ${destination} to exist");
    }
    if (source.exists()) {
        throw new IOException("Symlink failed: Expected ${source} to not exist yet");
    }
    ['ln', '-s', destination, source].execute().waitFor();
}

static void deleteIfExists(File file) {
    if (!file.exists()) {
        return;
    }
    if (file.isDirectory() && !Files.isSymbolicLink(file.toPath())) {
        ['rmdir', file].execute().waitFor();
    } else {
        ['rm', file].execute().waitFor();
    }
}

void createOrDestroyDebugTree(boolean create) {
    File debugDir = file("${explodeWar.destinationDir}/debug");
    deleteIfExists(file("${debugDir}/src/javascript"));
    deleteIfExists(file("${debugDir}/src/deps.js"));
    deleteIfExists(file("${debugDir}/src"));
    deleteIfExists(file("${debugDir}/lib"));
    deleteIfExists(debugDir);
    if (create) {
        debugDir.mkdir();
        createSymlink(ext.libraryDir, file("${debugDir}/lib"));
        file("${debugDir}/src").mkdir();
        createSymlink(ext.javascriptDepsFile, file("${debugDir}/src/deps.js"));
        createSymlink(ext.javascriptSourceDir, file("${debugDir}/src/javascript"));
    }
}

appengineRun.doFirst {
    createOrDestroyDebugTree(true);
}

explodeWar.doFirst {
    createOrDestroyDebugTree(false);
}

appengineStage.doFirst {
    createOrDestroyDebugTree(false);
}

group = 'com.cantstopthesignals.five'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.7  // App Engine Standard uses Java 7
targetCompatibility = 1.7  // App Engine Standard uses Java 7
