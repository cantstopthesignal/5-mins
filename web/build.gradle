import com.cantstopthesignals.checksumpaths.ChecksumPathsPropertyTask;
import java.nio.file.Files

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.4'
    }
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

configurations {
    closureCompiler
}

dependencies {
    providedCompile group: 'javax.servlet', name: 'servlet-api', version:'2.5'
    compile 'com.google.appengine:appengine-api-1.0-sdk:1.9.71'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    closureCompiler 'com.google.javascript:closure-compiler:v20190121'
}

appengine {
    run {
        port = 8888
    }

    deploy {
        // make this deploy the current version
        promote = true
        project 'five-minutes-cssignal'
        version '1'
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ["$buildDir/generated-resources"]
        }
    }
}

ext.javascriptSourceDir = file('src/main/javascript')
ext.cssSourceDir = file('src/main/webapp/css')
ext.javascriptOutputDir = file("${buildDir}/js")
ext.javascriptDepsFile = file("${buildDir}/deps.js")
ext.libraryDir = file('lib')
ext.closureLibraryDir = file("${libraryDir}/closure-library")
ext.closureCompilerJar = file("${libraryDir}/closure-compiler/compiler.jar")
ext.closureDepsWriterBin = file("${closureLibraryDir}/closure/bin/build/depswriter.py")

class ClosureCompileTask extends DefaultTask {
    String compilationLevel
    String namespace
    String warningLevel
    File destFile

    @TaskAction
    void run() {
        destFile.getParentFile().mkdirs();
        project.javaexec {
            classpath project.configurations.closureCompiler
            main = 'com.google.javascript.jscomp.CommandLineRunner'

            def closureArgs = []
            closureArgs << "--entry_point=${namespace}"
            closureArgs << "--js_output_file=${destFile}"
            closureArgs << "--compilation_level=${compilationLevel}"
            closureArgs << "--dependency_mode=STRICT"
            closureArgs << "--warning_level=${warningLevel}"
            closureArgs << "--jscomp_error=accessControls"
            closureArgs << "--jscomp_error=ambiguousFunctionDecl"
            closureArgs << "--jscomp_error=checkDebuggerStatement"
            closureArgs << "--jscomp_error=checkRegExp"
            closureArgs << "--jscomp_error=checkTypes"
            closureArgs << "--jscomp_error=checkVars"
            closureArgs << "--jscomp_error=const"
            closureArgs << "--jscomp_error=constantProperty"
            closureArgs << "--jscomp_error=deprecated"
            closureArgs << "--jscomp_error=duplicate"
            closureArgs << "--jscomp_error=externsValidation"
            closureArgs << "--jscomp_error=fileoverviewTags"
            closureArgs << "--jscomp_error=globalThis"
            closureArgs << "--jscomp_error=internetExplorerChecks"
            closureArgs << "--jscomp_error=invalidCasts"
            closureArgs << "--jscomp_error=missingProperties"
            closureArgs << "--jscomp_error=nonStandardJsDocs"
            closureArgs << "--jscomp_error=strictModuleDepCheck"
            closureArgs << "--jscomp_error=undefinedNames"
            closureArgs << "--jscomp_error=undefinedVars"
            closureArgs << "--jscomp_error=unknownDefines"
            closureArgs << "--jscomp_error=uselessCode"
            closureArgs << "--jscomp_error=visibility"
            closureArgs << "--force_inject_library=es6_runtime"
            closureArgs << "--hide_warnings_for=${project.closureLibraryDir}/closure/goog/debug/tracer.js"
            closureArgs << "--hide_warnings_for=${project.closureLibraryDir}/closure/goog/uri/uri.js"
            closureArgs << "${project.closureLibraryDir}/**.js"
            closureArgs << "!${project.closureLibraryDir}/**_test.js"
            closureArgs << "${project.javascriptSourceDir}/**.js"
            args closureArgs
        }
    }
}

class ClosureGenerateDepsTask extends DefaultTask {
    String rootRelativeToClosure
    File destFile

    @TaskAction
    void run() {
        destFile.getParentFile().mkdirs();
        project.exec {
            commandLine project.closureDepsWriterBin,
                    "--root_with_prefix=${project.javascriptSourceDir} ${rootRelativeToClosure}"
            standardOutput destFile.newOutputStream()
        }
    }
}

task compileJavascriptMainDebug(type: ClosureCompileTask) {
    compilationLevel "WHITESPACE_ONLY"
    namespace "five.main"
    warningLevel "VERBOSE"
    destFile file("${javascriptOutputDir}/main-debug.js")
}

task compileJavascriptMainOptimized(type: ClosureCompileTask) {
    compilationLevel "ADVANCED_OPTIMIZATIONS"
    namespace "five.main"
    warningLevel "VERBOSE"
    destFile file("${javascriptOutputDir}/main-optimized.js")
}

task compileJavascriptServiceWorkerDebug(type: ClosureCompileTask) {
    compilationLevel "WHITESPACE_ONLY"
    namespace "five.serviceWorkerMain"
    warningLevel "VERBOSE"
    destFile file("${javascriptOutputDir}/serviceWorker-debug.js")
}

task compileJavascriptServiceWorkerOptimized(type: ClosureCompileTask) {
    compilationLevel "ADVANCED_OPTIMIZATIONS"
    namespace "five.serviceWorkerMain"
    warningLevel "VERBOSE"
    destFile file("${javascriptOutputDir}/serviceWorker-optimized.js")
}

task generateJavascriptDeps(type: ClosureGenerateDepsTask) {
    rootRelativeToClosure "../../../../src/javascript"
    destFile javascriptDepsFile
}

compileJavascriptMainDebug.dependsOn(generateJavascriptDeps)

war {
    dependsOn generateJavascriptDeps
    if (!project.hasProperty('noJsCompile')) {
        dependsOn compileJavascriptMainDebug
        dependsOn compileJavascriptMainOptimized
        dependsOn compileJavascriptServiceWorkerDebug
        dependsOn compileJavascriptServiceWorkerOptimized
    }
    exclude "js"
    from("${buildDir}/js", {
        into 'js'
    })
}

task createChecksumPropertyFile(type : ChecksumPathsPropertyTask) {
    if (!project.hasProperty('noJsCompile')) {
        dependsOn compileJavascriptMainDebug
        dependsOn compileJavascriptMainOptimized
        dependsOn compileJavascriptServiceWorkerDebug
        dependsOn compileJavascriptServiceWorkerOptimized
    }

    paths = [javascriptOutputDir, file('src/main/webapp')]
    outputPropertyFile = file("$buildDir/generated-resources/checksum.properties")
}

if (!project.hasProperty('noJsCompile')) {
    compileJava.dependsOn(createChecksumPropertyFile)
}

static void createSymlink(File destination, File source) {
    if (!destination.exists()) {
        throw new IOException("Symlink failed: Expected ${destination} to exist");
    }
    if (source.exists()) {
        throw new IOException("Symlink failed: Expected ${source} to not exist yet");
    }
    ['ln', '-s', destination, source].execute().waitFor();
}

static void deleteIfExists(File file) {
    if (!file.exists()) {
        return;
    }
    if (file.isDirectory() && !Files.isSymbolicLink(file.toPath())) {
        ['rmdir', file].execute().waitFor();
    } else {
        ['rm', file].execute().waitFor();
    }
}

void createOrDestroyDebugTree(boolean create) {
    File debugDir = file("${explodeWar.destinationDir}/debug");
    deleteIfExists(file("${debugDir}/src/css"));
    deleteIfExists(file("${debugDir}/src/javascript"));
    deleteIfExists(file("${debugDir}/src/deps.js"));
    deleteIfExists(file("${debugDir}/src"));
    deleteIfExists(file("${debugDir}/lib"));
    deleteIfExists(debugDir);
    if (create) {
        debugDir.mkdir();
        createSymlink(ext.libraryDir, file("${debugDir}/lib"));
        file("${debugDir}/src").mkdir();
        createSymlink(ext.cssSourceDir, file("${debugDir}/src/css"));
        createSymlink(ext.javascriptDepsFile, file("${debugDir}/src/deps.js"));
        createSymlink(ext.javascriptSourceDir, file("${debugDir}/src/javascript"));
    }
}

appengineRun.doFirst {
    createOrDestroyDebugTree(true);
}

explodeWar.doFirst {
    createOrDestroyDebugTree(false);
}

appengineStage.doFirst {
    createOrDestroyDebugTree(false);
}

group = 'com.cantstopthesignals.five'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.8  // App Engine Standard uses Java 8
targetCompatibility = 1.8  // App Engine Standard uses Java 8
